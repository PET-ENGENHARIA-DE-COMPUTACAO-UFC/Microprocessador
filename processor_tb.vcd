$date
	Sat Jan 18 01:58:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 8 ! data_out [7:0] $end
$var wire 8 " current_state_out_wire [7:0] $end
$var wire 24 # command_word_wire [23:0] $end
$var wire 8 $ RD2_wire [7:0] $end
$var wire 8 % RD1_wire [7:0] $end
$var wire 8 & PC_wire [7:0] $end
$var wire 1 ' PC_inc_wire $end
$var wire 1 ( PC_en_wire $end
$var wire 8 ) ADR_3_wire [7:0] $end
$var wire 8 * ADR_2_wire [7:0] $end
$var wire 8 + ADR_1_wire [7:0] $end
$var reg 1 , clk $end
$var reg 1 - rst $end
$scope module DUT $end
$var wire 1 . MAR_load $end
$var wire 1 , clk $end
$var wire 1 - rst $end
$var wire 1 / write_en $end
$var wire 8 0 write_data_wire [7:0] $end
$var wire 1 1 regWriteEnable_wire $end
$var wire 1 2 regReadEnable_wire $end
$var wire 1 3 rd_en $end
$var wire 8 4 operation_result_wire [7:0] $end
$var wire 8 5 mux_result_wire [7:0] $end
$var wire 7 6 flag_wire [6:0] $end
$var wire 8 7 data_out [7:0] $end
$var wire 8 8 current_state_out_wire [7:0] $end
$var wire 24 9 command_word_wire [23:0] $end
$var wire 1 : ReadyRegFlag_wire $end
$var wire 8 ; RD2_wire [7:0] $end
$var wire 8 < RD1_wire [7:0] $end
$var wire 2 = Path_Type_wire [1:0] $end
$var wire 8 > PC_wire [7:0] $end
$var wire 8 ? PC_load_wire [7:0] $end
$var wire 1 ' PC_inc_wire $end
$var wire 1 ( PC_en_wire $end
$var wire 1 @ MAR_load_wire $end
$var wire 8 A MAR_instruction_wire [7:0] $end
$var wire 1 B IR_load_wire $end
$var wire 8 C ALU_sel_wire [7:0] $end
$var wire 8 D ADR_3_wire [7:0] $end
$var wire 8 E ADR_2_wire [7:0] $end
$var wire 8 F ADR_1_wire [7:0] $end
$var reg 8 G data_in [7:0] $end
$var reg 8 H write_adress [7:0] $end
$scope module ArithmeticLogicUnit $end
$var wire 1 , clk $end
$var wire 8 I xor_result [7:0] $end
$var wire 8 J xnor_result [7:0] $end
$var wire 8 K sub_result [7:0] $end
$var wire 1 L sub_carry $end
$var wire 8 M sr_result [7:0] $end
$var wire 8 N sl_result [7:0] $end
$var wire 8 O ror_result [7:0] $end
$var wire 8 P rol_result [7:0] $end
$var wire 8 Q or_result [7:0] $end
$var wire 8 R operand2 [7:0] $end
$var wire 8 S operand1 [7:0] $end
$var wire 8 T not_result [7:0] $end
$var wire 8 U nor_result [7:0] $end
$var wire 8 V nand_result [7:0] $end
$var wire 8 W mult_result [7:0] $end
$var wire 8 X mod_result [7:0] $end
$var wire 8 Y increment_result [7:0] $end
$var wire 1 Z inc_carry $end
$var wire 8 [ div_result [7:0] $end
$var wire 8 \ div_rest [7:0] $end
$var wire 8 ] decrement_result [7:0] $end
$var wire 1 ^ dec_carry $end
$var wire 8 _ and_result [7:0] $end
$var wire 8 ` add_result [7:0] $end
$var wire 1 a add_carry $end
$var wire 8 b ALU_sel [7:0] $end
$var parameter 8 c ADD $end
$var parameter 8 d CMP $end
$var parameter 8 e DEC $end
$var parameter 8 f DIV $end
$var parameter 8 g INC $end
$var parameter 8 h L_AND $end
$var parameter 8 i L_NAND $end
$var parameter 8 j L_NOR $end
$var parameter 8 k L_NOT $end
$var parameter 8 l L_OR $end
$var parameter 8 m L_ROL $end
$var parameter 8 n L_ROR $end
$var parameter 8 o L_XNOR $end
$var parameter 8 p L_XOR $end
$var parameter 8 q MOD $end
$var parameter 8 r MULT $end
$var parameter 8 s SL $end
$var parameter 8 t SR $end
$var parameter 8 u SUB $end
$var reg 7 v Flags [6:0] $end
$var reg 1 w eq $end
$var reg 1 x gt $end
$var reg 1 y lt $end
$var reg 8 z operation_result [7:0] $end
$scope module adder $end
$var wire 8 { numf2 [7:0] $end
$var wire 8 | numf1 [7:0] $end
$var wire 8 } csum [7:0] $end
$var wire 1 ~ cin1 $end
$var wire 1 a c_outc $end
$scope module FULL_ADDER4b1 $end
$var wire 1 !" c_in $end
$var wire 4 "" numf1 [3:0] $end
$var wire 4 #" numf2 [3:0] $end
$var wire 4 $" csum [3:0] $end
$var wire 1 %" cin3 $end
$var wire 1 &" cin2 $end
$var wire 1 '" cin1 $end
$var wire 1 ~ c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 !" c_in $end
$var wire 1 '" c_outc $end
$var wire 1 (" numf1 $end
$var wire 1 )" numf2 $end
$var wire 1 *" csum $end
$var wire 1 +" aux_sum $end
$var wire 1 ," aux_out2 $end
$var wire 1 -" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 -" c_out $end
$var wire 1 (" num1 $end
$var wire 1 )" num2 $end
$var wire 1 +" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 ," c_out $end
$var wire 1 !" num1 $end
$var wire 1 +" num2 $end
$var wire 1 *" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 '" c_in $end
$var wire 1 &" c_outc $end
$var wire 1 ." numf1 $end
$var wire 1 /" numf2 $end
$var wire 1 0" csum $end
$var wire 1 1" aux_sum $end
$var wire 1 2" aux_out2 $end
$var wire 1 3" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 3" c_out $end
$var wire 1 ." num1 $end
$var wire 1 /" num2 $end
$var wire 1 1" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 2" c_out $end
$var wire 1 '" num1 $end
$var wire 1 1" num2 $end
$var wire 1 0" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 &" c_in $end
$var wire 1 %" c_outc $end
$var wire 1 4" numf1 $end
$var wire 1 5" numf2 $end
$var wire 1 6" csum $end
$var wire 1 7" aux_sum $end
$var wire 1 8" aux_out2 $end
$var wire 1 9" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 9" c_out $end
$var wire 1 4" num1 $end
$var wire 1 5" num2 $end
$var wire 1 7" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 8" c_out $end
$var wire 1 &" num1 $end
$var wire 1 7" num2 $end
$var wire 1 6" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 %" c_in $end
$var wire 1 ~ c_outc $end
$var wire 1 :" numf1 $end
$var wire 1 ;" numf2 $end
$var wire 1 <" csum $end
$var wire 1 =" aux_sum $end
$var wire 1 >" aux_out2 $end
$var wire 1 ?" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 ?" c_out $end
$var wire 1 :" num1 $end
$var wire 1 ;" num2 $end
$var wire 1 =" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 >" c_out $end
$var wire 1 %" num1 $end
$var wire 1 =" num2 $end
$var wire 1 <" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4b2 $end
$var wire 1 ~ c_in $end
$var wire 4 @" numf1 [3:0] $end
$var wire 4 A" numf2 [3:0] $end
$var wire 4 B" csum [3:0] $end
$var wire 1 C" cin3 $end
$var wire 1 D" cin2 $end
$var wire 1 E" cin1 $end
$var wire 1 a c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 ~ c_in $end
$var wire 1 E" c_outc $end
$var wire 1 F" numf1 $end
$var wire 1 G" numf2 $end
$var wire 1 H" csum $end
$var wire 1 I" aux_sum $end
$var wire 1 J" aux_out2 $end
$var wire 1 K" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 K" c_out $end
$var wire 1 F" num1 $end
$var wire 1 G" num2 $end
$var wire 1 I" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 J" c_out $end
$var wire 1 ~ num1 $end
$var wire 1 I" num2 $end
$var wire 1 H" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 E" c_in $end
$var wire 1 D" c_outc $end
$var wire 1 L" numf1 $end
$var wire 1 M" numf2 $end
$var wire 1 N" csum $end
$var wire 1 O" aux_sum $end
$var wire 1 P" aux_out2 $end
$var wire 1 Q" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 Q" c_out $end
$var wire 1 L" num1 $end
$var wire 1 M" num2 $end
$var wire 1 O" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 P" c_out $end
$var wire 1 E" num1 $end
$var wire 1 O" num2 $end
$var wire 1 N" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 D" c_in $end
$var wire 1 C" c_outc $end
$var wire 1 R" numf1 $end
$var wire 1 S" numf2 $end
$var wire 1 T" csum $end
$var wire 1 U" aux_sum $end
$var wire 1 V" aux_out2 $end
$var wire 1 W" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 W" c_out $end
$var wire 1 R" num1 $end
$var wire 1 S" num2 $end
$var wire 1 U" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 V" c_out $end
$var wire 1 D" num1 $end
$var wire 1 U" num2 $end
$var wire 1 T" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 C" c_in $end
$var wire 1 a c_outc $end
$var wire 1 X" numf1 $end
$var wire 1 Y" numf2 $end
$var wire 1 Z" csum $end
$var wire 1 [" aux_sum $end
$var wire 1 \" aux_out2 $end
$var wire 1 ]" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 ]" c_out $end
$var wire 1 X" num1 $end
$var wire 1 Y" num2 $end
$var wire 1 [" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 \" c_out $end
$var wire 1 C" num1 $end
$var wire 1 [" num2 $end
$var wire 1 Z" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module and_gate $end
$var wire 8 ^" num2 [7:0] $end
$var wire 8 _" num1 [7:0] $end
$var reg 8 `" result [7:0] $end
$var reg 8 a" resultado [7:0] $end
$var integer 32 b" i [31:0] $end
$upscope $end
$scope module decrementor $end
$var wire 8 c" result [7:0] $end
$var wire 8 d" num1 [7:0] $end
$var wire 1 ^ cout $end
$scope module FULL_SUBTRACTOR8bDEC $end
$var wire 8 e" numf2 [7:0] $end
$var wire 8 f" numf1 [7:0] $end
$var wire 8 g" csub [7:0] $end
$var wire 1 h" cin1 $end
$var wire 1 ^ c_outc $end
$scope module FULL_SUBTRACTOR4b1 $end
$var wire 1 i" c_in $end
$var wire 4 j" numf1 [3:0] $end
$var wire 4 k" numf2 [3:0] $end
$var wire 4 l" csub [3:0] $end
$var wire 1 m" cin3 $end
$var wire 1 n" cin2 $end
$var wire 1 o" cin1 $end
$var wire 1 h" c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 i" c_in $end
$var wire 1 o" c_outc $end
$var wire 1 p" numf1 $end
$var wire 1 q" numf2 $end
$var wire 1 r" csub $end
$var wire 1 s" aux_sub $end
$var wire 1 t" aux_out2 $end
$var wire 1 u" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 u" c_out $end
$var wire 1 p" num1 $end
$var wire 1 q" num2 $end
$var wire 1 s" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 t" c_out $end
$var wire 1 s" num1 $end
$var wire 1 i" num2 $end
$var wire 1 r" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 o" c_in $end
$var wire 1 n" c_outc $end
$var wire 1 v" numf1 $end
$var wire 1 w" numf2 $end
$var wire 1 x" csub $end
$var wire 1 y" aux_sub $end
$var wire 1 z" aux_out2 $end
$var wire 1 {" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 {" c_out $end
$var wire 1 v" num1 $end
$var wire 1 w" num2 $end
$var wire 1 y" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 z" c_out $end
$var wire 1 y" num1 $end
$var wire 1 o" num2 $end
$var wire 1 x" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 n" c_in $end
$var wire 1 m" c_outc $end
$var wire 1 |" numf1 $end
$var wire 1 }" numf2 $end
$var wire 1 ~" csub $end
$var wire 1 !# aux_sub $end
$var wire 1 "# aux_out2 $end
$var wire 1 ## aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 ## c_out $end
$var wire 1 |" num1 $end
$var wire 1 }" num2 $end
$var wire 1 !# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 "# c_out $end
$var wire 1 !# num1 $end
$var wire 1 n" num2 $end
$var wire 1 ~" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 m" c_in $end
$var wire 1 h" c_outc $end
$var wire 1 $# numf1 $end
$var wire 1 %# numf2 $end
$var wire 1 &# csub $end
$var wire 1 '# aux_sub $end
$var wire 1 (# aux_out2 $end
$var wire 1 )# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 )# c_out $end
$var wire 1 $# num1 $end
$var wire 1 %# num2 $end
$var wire 1 '# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 (# c_out $end
$var wire 1 '# num1 $end
$var wire 1 m" num2 $end
$var wire 1 &# sub $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4b2 $end
$var wire 1 h" c_in $end
$var wire 4 *# numf1 [3:0] $end
$var wire 4 +# numf2 [3:0] $end
$var wire 4 ,# csub [3:0] $end
$var wire 1 -# cin3 $end
$var wire 1 .# cin2 $end
$var wire 1 /# cin1 $end
$var wire 1 ^ c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 h" c_in $end
$var wire 1 /# c_outc $end
$var wire 1 0# numf1 $end
$var wire 1 1# numf2 $end
$var wire 1 2# csub $end
$var wire 1 3# aux_sub $end
$var wire 1 4# aux_out2 $end
$var wire 1 5# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 5# c_out $end
$var wire 1 0# num1 $end
$var wire 1 1# num2 $end
$var wire 1 3# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 4# c_out $end
$var wire 1 3# num1 $end
$var wire 1 h" num2 $end
$var wire 1 2# sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 /# c_in $end
$var wire 1 .# c_outc $end
$var wire 1 6# numf1 $end
$var wire 1 7# numf2 $end
$var wire 1 8# csub $end
$var wire 1 9# aux_sub $end
$var wire 1 :# aux_out2 $end
$var wire 1 ;# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 ;# c_out $end
$var wire 1 6# num1 $end
$var wire 1 7# num2 $end
$var wire 1 9# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 :# c_out $end
$var wire 1 9# num1 $end
$var wire 1 /# num2 $end
$var wire 1 8# sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 .# c_in $end
$var wire 1 -# c_outc $end
$var wire 1 <# numf1 $end
$var wire 1 =# numf2 $end
$var wire 1 ># csub $end
$var wire 1 ?# aux_sub $end
$var wire 1 @# aux_out2 $end
$var wire 1 A# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 A# c_out $end
$var wire 1 <# num1 $end
$var wire 1 =# num2 $end
$var wire 1 ?# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 @# c_out $end
$var wire 1 ?# num1 $end
$var wire 1 .# num2 $end
$var wire 1 ># sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 -# c_in $end
$var wire 1 ^ c_outc $end
$var wire 1 B# numf1 $end
$var wire 1 C# numf2 $end
$var wire 1 D# csub $end
$var wire 1 E# aux_sub $end
$var wire 1 F# aux_out2 $end
$var wire 1 G# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 G# c_out $end
$var wire 1 B# num1 $end
$var wire 1 C# num2 $end
$var wire 1 E# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 F# c_out $end
$var wire 1 E# num1 $end
$var wire 1 -# num2 $end
$var wire 1 D# sub $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module div_module $end
$var wire 8 H# num2 [7:0] $end
$var wire 8 I# num1 [7:0] $end
$var reg 8 J# accumulator [7:0] $end
$var reg 8 K# divided [7:0] $end
$var reg 8 L# rest [7:0] $end
$var integer 32 M# i [31:0] $end
$upscope $end
$scope module divisor $end
$var wire 8 N# num2 [7:0] $end
$var wire 8 O# num1 [7:0] $end
$var reg 8 P# accumulator [7:0] $end
$var reg 8 Q# divided [7:0] $end
$var reg 8 R# quocient [7:0] $end
$var reg 8 S# rest [7:0] $end
$var reg 8 T# result [7:0] $end
$var integer 32 U# i [31:0] $end
$upscope $end
$scope module incrementor $end
$var wire 8 V# result [7:0] $end
$var wire 8 W# num1 [7:0] $end
$var wire 1 Z cout $end
$scope module FULL_ADDER8bINC $end
$var wire 8 X# numf2 [7:0] $end
$var wire 8 Y# numf1 [7:0] $end
$var wire 8 Z# csum [7:0] $end
$var wire 1 [# cin1 $end
$var wire 1 Z c_outc $end
$scope module FULL_ADDER4b1 $end
$var wire 1 \# c_in $end
$var wire 4 ]# numf1 [3:0] $end
$var wire 4 ^# numf2 [3:0] $end
$var wire 4 _# csum [3:0] $end
$var wire 1 `# cin3 $end
$var wire 1 a# cin2 $end
$var wire 1 b# cin1 $end
$var wire 1 [# c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 \# c_in $end
$var wire 1 b# c_outc $end
$var wire 1 c# numf1 $end
$var wire 1 d# numf2 $end
$var wire 1 e# csum $end
$var wire 1 f# aux_sum $end
$var wire 1 g# aux_out2 $end
$var wire 1 h# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 h# c_out $end
$var wire 1 c# num1 $end
$var wire 1 d# num2 $end
$var wire 1 f# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 g# c_out $end
$var wire 1 \# num1 $end
$var wire 1 f# num2 $end
$var wire 1 e# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 b# c_in $end
$var wire 1 a# c_outc $end
$var wire 1 i# numf1 $end
$var wire 1 j# numf2 $end
$var wire 1 k# csum $end
$var wire 1 l# aux_sum $end
$var wire 1 m# aux_out2 $end
$var wire 1 n# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 n# c_out $end
$var wire 1 i# num1 $end
$var wire 1 j# num2 $end
$var wire 1 l# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 m# c_out $end
$var wire 1 b# num1 $end
$var wire 1 l# num2 $end
$var wire 1 k# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 a# c_in $end
$var wire 1 `# c_outc $end
$var wire 1 o# numf1 $end
$var wire 1 p# numf2 $end
$var wire 1 q# csum $end
$var wire 1 r# aux_sum $end
$var wire 1 s# aux_out2 $end
$var wire 1 t# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 t# c_out $end
$var wire 1 o# num1 $end
$var wire 1 p# num2 $end
$var wire 1 r# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 s# c_out $end
$var wire 1 a# num1 $end
$var wire 1 r# num2 $end
$var wire 1 q# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 `# c_in $end
$var wire 1 [# c_outc $end
$var wire 1 u# numf1 $end
$var wire 1 v# numf2 $end
$var wire 1 w# csum $end
$var wire 1 x# aux_sum $end
$var wire 1 y# aux_out2 $end
$var wire 1 z# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 z# c_out $end
$var wire 1 u# num1 $end
$var wire 1 v# num2 $end
$var wire 1 x# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 y# c_out $end
$var wire 1 `# num1 $end
$var wire 1 x# num2 $end
$var wire 1 w# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4b2 $end
$var wire 1 [# c_in $end
$var wire 4 {# numf1 [3:0] $end
$var wire 4 |# numf2 [3:0] $end
$var wire 4 }# csum [3:0] $end
$var wire 1 ~# cin3 $end
$var wire 1 !$ cin2 $end
$var wire 1 "$ cin1 $end
$var wire 1 Z c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 [# c_in $end
$var wire 1 "$ c_outc $end
$var wire 1 #$ numf1 $end
$var wire 1 $$ numf2 $end
$var wire 1 %$ csum $end
$var wire 1 &$ aux_sum $end
$var wire 1 '$ aux_out2 $end
$var wire 1 ($ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 ($ c_out $end
$var wire 1 #$ num1 $end
$var wire 1 $$ num2 $end
$var wire 1 &$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 '$ c_out $end
$var wire 1 [# num1 $end
$var wire 1 &$ num2 $end
$var wire 1 %$ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 "$ c_in $end
$var wire 1 !$ c_outc $end
$var wire 1 )$ numf1 $end
$var wire 1 *$ numf2 $end
$var wire 1 +$ csum $end
$var wire 1 ,$ aux_sum $end
$var wire 1 -$ aux_out2 $end
$var wire 1 .$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 .$ c_out $end
$var wire 1 )$ num1 $end
$var wire 1 *$ num2 $end
$var wire 1 ,$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 -$ c_out $end
$var wire 1 "$ num1 $end
$var wire 1 ,$ num2 $end
$var wire 1 +$ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 !$ c_in $end
$var wire 1 ~# c_outc $end
$var wire 1 /$ numf1 $end
$var wire 1 0$ numf2 $end
$var wire 1 1$ csum $end
$var wire 1 2$ aux_sum $end
$var wire 1 3$ aux_out2 $end
$var wire 1 4$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 4$ c_out $end
$var wire 1 /$ num1 $end
$var wire 1 0$ num2 $end
$var wire 1 2$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 3$ c_out $end
$var wire 1 !$ num1 $end
$var wire 1 2$ num2 $end
$var wire 1 1$ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 ~# c_in $end
$var wire 1 Z c_outc $end
$var wire 1 5$ numf1 $end
$var wire 1 6$ numf2 $end
$var wire 1 7$ csum $end
$var wire 1 8$ aux_sum $end
$var wire 1 9$ aux_out2 $end
$var wire 1 :$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 :$ c_out $end
$var wire 1 5$ num1 $end
$var wire 1 6$ num2 $end
$var wire 1 8$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 9$ c_out $end
$var wire 1 ~# num1 $end
$var wire 1 8$ num2 $end
$var wire 1 7$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module left_shifter $end
$var wire 8 ;$ y [7:0] $end
$var wire 8 <$ a [7:0] $end
$upscope $end
$scope module multiplier $end
$var wire 8 =$ num2 [7:0] $end
$var wire 8 >$ num1 [7:0] $end
$var reg 16 ?$ accumulator [15:0] $end
$var reg 8 @$ result [7:0] $end
$var integer 32 A$ i [31:0] $end
$upscope $end
$scope module nand_gate $end
$var wire 8 B$ num2 [7:0] $end
$var wire 8 C$ num1 [7:0] $end
$var reg 8 D$ result [7:0] $end
$var reg 8 E$ resultado [7:0] $end
$var integer 32 F$ i [31:0] $end
$upscope $end
$scope module nor_gate $end
$var wire 8 G$ num2 [7:0] $end
$var wire 8 H$ num1 [7:0] $end
$var reg 8 I$ result [7:0] $end
$var reg 8 J$ resultado [7:0] $end
$var integer 32 K$ i [31:0] $end
$upscope $end
$scope module not_gate $end
$var wire 8 L$ num1 [7:0] $end
$var reg 8 M$ result [7:0] $end
$var reg 8 N$ resultado [7:0] $end
$var integer 32 O$ i [31:0] $end
$upscope $end
$scope module or_gate $end
$var wire 8 P$ num2 [7:0] $end
$var wire 8 Q$ num1 [7:0] $end
$var reg 8 R$ result [7:0] $end
$var reg 8 S$ resultado [7:0] $end
$var integer 32 T$ i [31:0] $end
$upscope $end
$scope module rol_gate $end
$var wire 8 U$ y [7:0] $end
$var wire 8 V$ a [7:0] $end
$upscope $end
$scope module ror_gate $end
$var wire 8 W$ y [7:0] $end
$var wire 8 X$ a [7:0] $end
$upscope $end
$scope module shift_right $end
$var wire 3 Y$ shamt [2:0] $end
$var wire 8 Z$ y [7:0] $end
$var wire 8 [$ a [7:0] $end
$upscope $end
$scope module subtractor $end
$var wire 8 \$ numf2 [7:0] $end
$var wire 8 ]$ numf1 [7:0] $end
$var wire 8 ^$ csub [7:0] $end
$var wire 1 _$ cin1 $end
$var wire 1 L c_outc $end
$scope module FULL_SUBTRACTOR4b1 $end
$var wire 1 `$ c_in $end
$var wire 4 a$ numf1 [3:0] $end
$var wire 4 b$ numf2 [3:0] $end
$var wire 4 c$ csub [3:0] $end
$var wire 1 d$ cin3 $end
$var wire 1 e$ cin2 $end
$var wire 1 f$ cin1 $end
$var wire 1 _$ c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 `$ c_in $end
$var wire 1 f$ c_outc $end
$var wire 1 g$ numf1 $end
$var wire 1 h$ numf2 $end
$var wire 1 i$ csub $end
$var wire 1 j$ aux_sub $end
$var wire 1 k$ aux_out2 $end
$var wire 1 l$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 l$ c_out $end
$var wire 1 g$ num1 $end
$var wire 1 h$ num2 $end
$var wire 1 j$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 k$ c_out $end
$var wire 1 j$ num1 $end
$var wire 1 `$ num2 $end
$var wire 1 i$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 f$ c_in $end
$var wire 1 e$ c_outc $end
$var wire 1 m$ numf1 $end
$var wire 1 n$ numf2 $end
$var wire 1 o$ csub $end
$var wire 1 p$ aux_sub $end
$var wire 1 q$ aux_out2 $end
$var wire 1 r$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 r$ c_out $end
$var wire 1 m$ num1 $end
$var wire 1 n$ num2 $end
$var wire 1 p$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 q$ c_out $end
$var wire 1 p$ num1 $end
$var wire 1 f$ num2 $end
$var wire 1 o$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 e$ c_in $end
$var wire 1 d$ c_outc $end
$var wire 1 s$ numf1 $end
$var wire 1 t$ numf2 $end
$var wire 1 u$ csub $end
$var wire 1 v$ aux_sub $end
$var wire 1 w$ aux_out2 $end
$var wire 1 x$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 x$ c_out $end
$var wire 1 s$ num1 $end
$var wire 1 t$ num2 $end
$var wire 1 v$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 w$ c_out $end
$var wire 1 v$ num1 $end
$var wire 1 e$ num2 $end
$var wire 1 u$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 d$ c_in $end
$var wire 1 _$ c_outc $end
$var wire 1 y$ numf1 $end
$var wire 1 z$ numf2 $end
$var wire 1 {$ csub $end
$var wire 1 |$ aux_sub $end
$var wire 1 }$ aux_out2 $end
$var wire 1 ~$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 ~$ c_out $end
$var wire 1 y$ num1 $end
$var wire 1 z$ num2 $end
$var wire 1 |$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 }$ c_out $end
$var wire 1 |$ num1 $end
$var wire 1 d$ num2 $end
$var wire 1 {$ sub $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4b2 $end
$var wire 1 _$ c_in $end
$var wire 4 !% numf1 [3:0] $end
$var wire 4 "% numf2 [3:0] $end
$var wire 4 #% csub [3:0] $end
$var wire 1 $% cin3 $end
$var wire 1 %% cin2 $end
$var wire 1 &% cin1 $end
$var wire 1 L c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 _$ c_in $end
$var wire 1 &% c_outc $end
$var wire 1 '% numf1 $end
$var wire 1 (% numf2 $end
$var wire 1 )% csub $end
$var wire 1 *% aux_sub $end
$var wire 1 +% aux_out2 $end
$var wire 1 ,% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 ,% c_out $end
$var wire 1 '% num1 $end
$var wire 1 (% num2 $end
$var wire 1 *% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 +% c_out $end
$var wire 1 *% num1 $end
$var wire 1 _$ num2 $end
$var wire 1 )% sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 &% c_in $end
$var wire 1 %% c_outc $end
$var wire 1 -% numf1 $end
$var wire 1 .% numf2 $end
$var wire 1 /% csub $end
$var wire 1 0% aux_sub $end
$var wire 1 1% aux_out2 $end
$var wire 1 2% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 2% c_out $end
$var wire 1 -% num1 $end
$var wire 1 .% num2 $end
$var wire 1 0% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 1% c_out $end
$var wire 1 0% num1 $end
$var wire 1 &% num2 $end
$var wire 1 /% sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 %% c_in $end
$var wire 1 $% c_outc $end
$var wire 1 3% numf1 $end
$var wire 1 4% numf2 $end
$var wire 1 5% csub $end
$var wire 1 6% aux_sub $end
$var wire 1 7% aux_out2 $end
$var wire 1 8% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 8% c_out $end
$var wire 1 3% num1 $end
$var wire 1 4% num2 $end
$var wire 1 6% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 7% c_out $end
$var wire 1 6% num1 $end
$var wire 1 %% num2 $end
$var wire 1 5% sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 $% c_in $end
$var wire 1 L c_outc $end
$var wire 1 9% numf1 $end
$var wire 1 :% numf2 $end
$var wire 1 ;% csub $end
$var wire 1 <% aux_sub $end
$var wire 1 =% aux_out2 $end
$var wire 1 >% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 >% c_out $end
$var wire 1 9% num1 $end
$var wire 1 :% num2 $end
$var wire 1 <% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 =% c_out $end
$var wire 1 <% num1 $end
$var wire 1 $% num2 $end
$var wire 1 ;% sub $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xnor_gate $end
$var wire 8 ?% num2 [7:0] $end
$var wire 8 @% num1 [7:0] $end
$var reg 8 A% result [7:0] $end
$var reg 8 B% resultado [7:0] $end
$var integer 32 C% i [31:0] $end
$upscope $end
$scope module xor_gate $end
$var wire 8 D% num2 [7:0] $end
$var wire 8 E% num1 [7:0] $end
$var reg 8 F% result [7:0] $end
$var reg 8 G% resultado [7:0] $end
$var integer 32 H% i [31:0] $end
$upscope $end
$upscope $end
$scope module IR $end
$var wire 1 , clk $end
$var wire 8 I% payload [7:0] $end
$var wire 1 B IR_load $end
$var parameter 3 J% delay $end
$var reg 1 : ReadyFlag $end
$var reg 3 K% counter [2:0] $end
$var reg 24 L% instReg [23:0] $end
$upscope $end
$scope module MemoryAdressRegister $end
$var wire 1 . MAR_load $end
$var wire 1 , clk $end
$var wire 8 M% data [7:0] $end
$var reg 8 N% instruction [7:0] $end
$upscope $end
$scope module ProgramCounter $end
$var wire 1 , clk $end
$var wire 8 O% PC_load [7:0] $end
$var wire 1 ' PC_inc $end
$var wire 1 ( PC_en $end
$var reg 8 P% PC [7:0] $end
$upscope $end
$scope module RF $end
$var wire 7 Q% Flag_input [6:0] $end
$var wire 8 R% WriteData [7:0] $end
$var wire 1 , clk $end
$var wire 1 1 regWriteEnable $end
$var wire 1 2 regReadEnable $end
$var wire 8 S% A3 [7:0] $end
$var wire 8 T% A2 [7:0] $end
$var wire 8 U% A1 [7:0] $end
$var reg 8 V% RD1 [7:0] $end
$var reg 8 W% RD2 [7:0] $end
$upscope $end
$scope module RandomAcessMemory $end
$var wire 1 , clk $end
$var wire 8 X% data_in [7:0] $end
$var wire 8 Y% rd_adress [7:0] $end
$var wire 1 - rst $end
$var wire 8 Z% write_adress [7:0] $end
$var wire 1 / write_en $end
$var wire 1 3 rd_en $end
$var parameter 32 [% addr_size $end
$var parameter 32 \% data_size $end
$var reg 8 ]% data_out [7:0] $end
$upscope $end
$scope module UC $end
$var wire 8 ^% PC_current_value [7:0] $end
$var wire 1 : ReadyRegFlag $end
$var wire 1 , clk $end
$var wire 24 _% command_word [23:0] $end
$var wire 1 - rst $end
$var parameter 8 `% ADD $end
$var parameter 32 a% ARITHMETIC_OPERATION_0 $end
$var parameter 32 b% ARITHMETIC_OPERATION_1 $end
$var parameter 32 c% ARITHMETIC_OPERATION_2 $end
$var parameter 8 d% CALL $end
$var parameter 32 e% CALL_0 $end
$var parameter 32 f% CALL_1 $end
$var parameter 8 g% CMP $end
$var parameter 8 h% DEC $end
$var parameter 32 i% DECODE $end
$var parameter 8 j% DIV $end
$var parameter 8 k% FETCH_0 $end
$var parameter 8 l% FETCH_1 $end
$var parameter 8 m% FETCH_2 $end
$var parameter 8 n% INC $end
$var parameter 8 o% JMP $end
$var parameter 32 p% JMP_0 $end
$var parameter 32 q% JMP_1 $end
$var parameter 8 r% LOA_DIR $end
$var parameter 32 s% LOA_DIR_0 $end
$var parameter 32 t% LOA_DIR_1 $end
$var parameter 8 u% LOA_IMM $end
$var parameter 32 v% LOA_IMM_0 $end
$var parameter 8 w% L_AND $end
$var parameter 8 x% L_NAND $end
$var parameter 8 y% L_NOR $end
$var parameter 8 z% L_NOT $end
$var parameter 8 {% L_OR $end
$var parameter 8 |% L_ROL $end
$var parameter 8 }% L_ROR $end
$var parameter 8 ~% L_XNOR $end
$var parameter 8 !& L_XOR $end
$var parameter 8 "& MOD $end
$var parameter 8 #& MOV $end
$var parameter 32 $& MOV_0 $end
$var parameter 32 %& MOV_1 $end
$var parameter 8 && MULT $end
$var parameter 8 '& RET $end
$var parameter 32 (& RET_0 $end
$var parameter 8 )& SL $end
$var parameter 8 *& SR $end
$var parameter 8 +& STR_DIR $end
$var parameter 32 ,& STR_DIR_0 $end
$var parameter 32 -& STR_DIR_1 $end
$var parameter 8 .& STR_IMM $end
$var parameter 32 /& STR_IMM_0 $end
$var parameter 8 0& SUB $end
$var parameter 2 1& alu_path $end
$var parameter 2 2& memory_path $end
$var parameter 2 3& uc_path $end
$var reg 8 4& ADR_1 [7:0] $end
$var reg 8 5& ADR_2 [7:0] $end
$var reg 8 6& ADR_3 [7:0] $end
$var reg 8 7& ALU_sel [7:0] $end
$var reg 1 B IR_load $end
$var reg 1 @ MAR_load $end
$var reg 1 ( PC_en $end
$var reg 1 ' PC_inc $end
$var reg 8 8& PC_load [7:0] $end
$var reg 2 9& Path_Type [1:0] $end
$var reg 8 :& current_state [7:0] $end
$var reg 8 ;& current_state_out [7:0] $end
$var reg 8 <& next_state [7:0] $end
$var reg 1 3 rd_en $end
$var reg 1 2 regReadEnable $end
$var reg 1 1 regWriteEnable $end
$var reg 4 =& stack_pointer [3:0] $end
$var reg 8 >& write_data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 3&
b1 2&
b0 1&
b100 0&
b101 /&
b1 .&
b111 -&
b110 ,&
b10 +&
b10101 *&
b10100 )&
b10100 (&
b11011 '&
b101 &&
b1100 %&
b1011 $&
b11010 #&
b111 "&
b10001 !&
b1111 ~%
b10111 }%
b10110 |%
b1001 {%
b1010 z%
b1101 y%
b1110 x%
b1000 w%
b1000 v%
b11000 u%
b1010 t%
b1001 s%
b11001 r%
b10001 q%
b10000 p%
b11001 o%
b10000 n%
b11 m%
b1 l%
b0 k%
b110 j%
b100 i%
b10010 h%
b11000 g%
b10011 f%
b10010 e%
b11010 d%
b1111 c%
b1110 b%
b1101 a%
b11 `%
b1000 \%
b1000 [%
b10 J%
b100 u
b10101 t
b10100 s
b101 r
b111 q
b10001 p
b1111 o
b10111 n
b10110 m
b1001 l
b1010 k
b1101 j
b1110 i
b1000 h
b10000 g
b110 f
b10010 e
b11000 d
b11 c
$end
#0
$dumpvars
bx >&
bx =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
bx 6&
bx 5&
bx 4&
bx _%
bx ^%
bx ]%
bx Z%
bx Y%
bx X%
bx W%
bx V%
bx U%
bx T%
bx S%
bx R%
bx Q%
bx P%
bx O%
bx N%
bx M%
bx L%
b0 K%
bx I%
bx H%
bx G%
bx F%
bx E%
bx D%
bx C%
bx B%
bx A%
bx @%
bx ?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
bx #%
bx "%
bx !%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
0k$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
bx c$
bx b$
bx a$
0`$
x_$
bx ^$
bx ]$
bx \$
bx [$
b0xxxxxxx Z$
bz Y$
bx X$
bx W$
bx V$
bx U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx0 ;$
0:$
x9$
x8$
x7$
06$
x5$
04$
x3$
x2$
x1$
00$
x/$
0.$
x-$
x,$
x+$
0*$
x)$
0($
x'$
x&$
x%$
0$$
x#$
x"$
x!$
x~#
bx }#
b0 |#
bx {#
0z#
xy#
xx#
xw#
0v#
xu#
0t#
xs#
xr#
xq#
0p#
xo#
0n#
xm#
xl#
xk#
0j#
xi#
xh#
0g#
xf#
xe#
1d#
xc#
xb#
xa#
x`#
bx _#
b1 ^#
bx ]#
0\#
x[#
bx Z#
bx Y#
b1 X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
0G#
xF#
xE#
xD#
0C#
xB#
0A#
x@#
x?#
x>#
0=#
x<#
0;#
x:#
x9#
x8#
07#
x6#
05#
x4#
x3#
x2#
01#
x0#
x/#
x.#
x-#
bx ,#
b0 +#
bx *#
0)#
x(#
x'#
x&#
0%#
x$#
0##
x"#
x!#
x~"
0}"
x|"
0{"
xz"
xy"
xx"
0w"
xv"
xu"
0t"
xs"
xr"
1q"
xp"
xo"
xn"
xm"
bx l"
b1 k"
bx j"
0i"
xh"
bx g"
bx f"
b1 e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
bx B"
bx A"
bx @"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
0,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
bx $"
bx #"
bx ""
0!"
x~
bx }
bx |
bx {
bx z
xy
xx
xw
bx v
bx b
xa
bx `
bx _
x^
bx ]
bx \
bx [
xZ
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx0 N
b0xxxxxxx M
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
xB
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
0:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
x2
x1
bx 0
z/
z.
0-
0,
bx +
bx *
bx )
x(
x'
bx &
bx %
bx $
bx #
bx "
bx !
$end
#30
b1001 6
b1001 v
b1001 Q%
b0 4
b0 z
1,
#60
0,
#90
1,
#100
1-
#120
0,
#150
1^
0L
1D#
1F#
0;%
0=%
1-#
0$%
1>#
1@#
05%
07%
1.#
0%%
18#
1:#
0/%
01%
1/#
0&%
b1111 ,#
12#
14#
b0 #%
0)%
0+%
1h"
0_$
1&#
1(#
0{$
0}$
1m"
0d$
1~"
1"#
0u$
0w$
1n"
0e$
0+$
01$
07$
0q#
0w#
b0 }#
0%$
1x"
1z"
0N"
0T"
0Z"
06"
0<"
b0 B"
0H"
0o$
0q$
0"$
0!$
0~#
0Z
0k#
0a#
0`#
0[#
1o"
0E"
0D"
0C"
0a
00"
0&"
0%"
0~
0f$
b0 K
b0 ^$
b0 c$
0i$
0'$
0-$
03$
09$
b1 Y
b1 V#
b1 Z#
b1 _#
1e#
0b#
0m#
0s#
0y#
b11111111 ]
b11111111 c"
b11111111 g"
b1111 l"
1r"
1u"
0J"
0P"
0V"
0\"
b0 `
b0 }
b0 $"
0*"
0'"
02"
08"
0>"
0,%
02%
08%
0>%
0*%
00%
06%
0<%
0l$
0r$
0x$
0~$
0j$
0p$
0v$
0|$
0&$
0,$
02$
08$
1f#
0h#
0l#
0r#
0x#
03#
09#
0?#
0E#
1s"
0y"
0!#
0'#
0I"
0K"
0O"
0Q"
0U"
0W"
0["
0]"
0+"
0-"
01"
03"
07"
09"
0="
0?"
0(%
0.%
04%
0:%
0'%
0-%
03%
09%
0h$
0n$
0t$
0z$
0g$
0m$
0s$
0y$
0#$
0)$
0/$
05$
0c#
0i#
0o#
0u#
00#
06#
0<#
0B#
0p"
0v"
0|"
0$#
0G"
0M"
0S"
0Y"
0F"
0L"
0R"
0X"
0)"
0/"
05"
0;"
0("
0."
04"
0:"
b0 5
b0 R%
b0 "%
b0 !%
b0 b$
b0 a$
b0 M
b0 Z$
b0 O
b0 W$
b0 P
b0 U$
b0 N
b0 ;$
b0 {#
b0 ]#
b0 *#
b0 j"
b0 A"
b0 @"
b0 #"
b0 ""
b0 _
b0 `"
b1000 b"
b0 a"
b0 X
b0 L#
b1000 M#
b0 K#
b0 J#
b0 \
b0 S#
b11111111 [
b11111111 T#
b1000 U#
b0 Q#
b11111111 R#
b0 P#
b0 W
b0 @$
b1000 A$
b0 ?$
b11111111 V
b11111111 D$
b1000 F$
b11111111 E$
b11111111 U
b11111111 I$
b1000 K$
b11111111 J$
b11111111 T
b11111111 M$
b1000 O$
b11111111 N$
b0 Q
b0 R$
b1000 T$
b0 S$
b11111111 J
b11111111 A%
b1000 C%
b11111111 B%
b0 I
b0 F%
b1000 H%
b0 G%
b0 $
b0 ;
b0 W%
b0 %
b0 <
b0 R
b0 S
b0 {
b0 |
b0 ^"
b0 _"
b0 d"
b0 f"
b0 H#
b0 I#
b0 N#
b0 O#
b0 W#
b0 Y#
b0 <$
b0 =$
b0 >$
b0 B$
b0 C$
b0 G$
b0 H$
b0 L$
b0 P$
b0 Q$
b0 V$
b0 X$
b0 [$
b0 \$
b0 ]$
b0 ?%
b0 @%
b0 D%
b0 E%
b0 V%
b0 ?
b0 O%
b0 8&
1(
b0 =&
b0 )
b0 D
b0 S%
b0 6&
b0 *
b0 E
b0 T%
b0 5&
b0 +
b0 F
b0 U%
b0 4&
02
01
b0 0
b0 >&
1B
1@
0'
b0 :&
1,
#180
0,
#200
0-
#210
1'
0B
0@
b1 K%
b0 &
b0 >
b0 P%
b0 Y%
b0 ^%
b0 "
b0 8
b0 ;&
b1 :&
b1 <&
1,
#240
0,
#270
b1 "
b1 8
b1 ;&
b1 !
b1 7
b1 M%
b1 ]%
b1 &
b1 >
b1 P%
b1 Y%
b1 ^%
b11 <&
1,
#300
0,
#330
1B
0'
b10 &
b10 >
b10 P%
b10 Y%
b10 ^%
b0 !
b0 7
b0 M%
b0 ]%
b11 :&
1,
#360
0,
#390
b0 <&
b11 "
b11 8
b11 ;&
b1001 !
b1001 7
b1001 M%
b1001 ]%
b0 &
b0 >
b0 P%
b0 Y%
b0 ^%
b10 K%
1,
#420
0,
#450
1@
1B
1:
b1 !
b1 7
b1 M%
b1 ]%
b0 :&
1,
#480
0,
#510
b0 "
b0 8
b0 ;&
b1 <&
1,
#540
0,
#570
1'
0B
0@
b1 :&
1,
#600
0,
#630
b1 "
b1 8
b1 ;&
b1 &
b1 >
b1 P%
b1 Y%
b1 ^%
b11 <&
1,
#660
0,
#690
1B
0'
b10 &
b10 >
b10 P%
b10 Y%
b10 ^%
b0 !
b0 7
b0 M%
b0 ]%
b11 :&
1,
#720
0,
#750
b100 <&
b11 "
b11 8
b11 ;&
b1001 !
b1001 7
b1001 M%
b1001 ]%
b0 &
b0 >
b0 P%
b0 Y%
b0 ^%
1,
#780
0,
#810
0B
b1 !
b1 7
b1 M%
b1 ]%
b100 :&
1,
#840
0,
#870
b100 "
b100 8
b100 ;&
1,
#900
0,
#930
1,
#960
0,
#990
1,
#1020
0,
#1050
1,
#1080
0,
#1110
1,
#1140
0,
#1170
1,
#1200
0,
#1230
1,
#1260
0,
#1290
1,
#1320
0,
#1350
1,
#1380
0,
#1410
1,
#1440
0,
#1470
1,
#1500
0,
#1530
1,
#1560
0,
#1590
1,
#1620
0,
#1650
1,
#1680
0,
#1710
1,
#1740
0,
#1770
1,
#1800
0,
#1830
1,
#1860
0,
#1890
1,
#1920
0,
#1950
1,
#1980
0,
#2010
1,
#2040
0,
#2070
1,
#2100
0,
#2130
1,
#2160
0,
#2190
1,
#2200
