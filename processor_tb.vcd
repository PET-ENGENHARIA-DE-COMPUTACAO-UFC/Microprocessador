$date
	Fri Jan 17 12:02:06 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 8 ! IR_opcode_wire [7:0] $end
$var wire 8 " IR_operand1_wire [7:0] $end
$var wire 8 # IR_operand2_wire [7:0] $end
$var wire 8 $ PC_adress_wire [7:0] $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$scope module DUT $end
$var wire 8 ' IR_opcode_wire [7:0] $end
$var wire 8 ( IR_operand1_wire [7:0] $end
$var wire 8 ) IR_operand2_wire [7:0] $end
$var wire 1 * clk $end
$var wire 24 + command_word_wire [23:0] $end
$var wire 1 , rst $end
$var wire 8 - write_data_wire [7:0] $end
$var wire 1 . regWriteEnable_wire $end
$var wire 1 / regReadEnable_wire $end
$var wire 8 0 operand2_wire [7:0] $end
$var wire 8 1 operand1_wire [7:0] $end
$var wire 7 2 flag_wire [6:0] $end
$var wire 3 3 compare_result_wire [2:0] $end
$var wire 8 4 RAM_instruction_wire [7:0] $end
$var wire 8 5 PC_load_wire [7:0] $end
$var wire 1 6 PC_inc_wire $end
$var wire 1 7 PC_en_wire $end
$var wire 8 8 PC_adress_wire [7:0] $end
$var wire 1 9 MAR_load $end
$var wire 1 : IR_load $end
$var wire 8 ; ALU_sel_wire [7:0] $end
$var wire 8 < ADR_3_wire [7:0] $end
$var wire 8 = ADR_2_wire [7:0] $end
$var wire 8 > ADR_1_wire [7:0] $end
$scope module ArithmeticLogicUnit $end
$var wire 1 * clk $end
$var wire 8 ? xor_result [7:0] $end
$var wire 8 @ xnor_result [7:0] $end
$var wire 8 A sub_result [7:0] $end
$var wire 1 B sub_carry $end
$var wire 8 C sr_result [7:0] $end
$var wire 8 D sl_result [7:0] $end
$var wire 8 E ror_result [7:0] $end
$var wire 8 F rol_result [7:0] $end
$var wire 8 G or_result [7:0] $end
$var wire 8 H operand2 [7:0] $end
$var wire 8 I operand1 [7:0] $end
$var wire 8 J not_result [7:0] $end
$var wire 8 K nor_result [7:0] $end
$var wire 8 L nand_result [7:0] $end
$var wire 8 M mult_result [7:0] $end
$var wire 8 N mod_result [7:0] $end
$var wire 8 O increment_result [7:0] $end
$var wire 1 P inc_carry $end
$var wire 8 Q div_result [7:0] $end
$var wire 8 R div_rest [7:0] $end
$var wire 8 S decrement_result [7:0] $end
$var wire 1 T dec_carry $end
$var wire 8 U and_result [7:0] $end
$var wire 8 V add_result [7:0] $end
$var wire 1 W add_carry $end
$var wire 8 X ALU_sel [7:0] $end
$var parameter 8 Y ADD $end
$var parameter 8 Z CMP $end
$var parameter 8 [ DEC $end
$var parameter 8 \ DIV $end
$var parameter 8 ] INC $end
$var parameter 8 ^ L_AND $end
$var parameter 8 _ L_NAND $end
$var parameter 8 ` L_NOR $end
$var parameter 8 a L_NOT $end
$var parameter 8 b L_OR $end
$var parameter 8 c L_ROL $end
$var parameter 8 d L_ROR $end
$var parameter 8 e L_XNOR $end
$var parameter 8 f L_XOR $end
$var parameter 8 g MOD $end
$var parameter 8 h MULT $end
$var parameter 8 i SL $end
$var parameter 8 j SR $end
$var parameter 8 k SUB $end
$var reg 7 l Flags [6:0] $end
$var reg 1 m eq $end
$var reg 1 n gt $end
$var reg 1 o lt $end
$var reg 8 p operation_result [7:0] $end
$scope module adder $end
$var wire 8 q numf2 [7:0] $end
$var wire 8 r numf1 [7:0] $end
$var wire 8 s csum [7:0] $end
$var wire 1 t cin1 $end
$var wire 1 W c_outc $end
$scope module FULL_ADDER4b1 $end
$var wire 1 u c_in $end
$var wire 4 v numf1 [3:0] $end
$var wire 4 w numf2 [3:0] $end
$var wire 4 x csum [3:0] $end
$var wire 1 y cin3 $end
$var wire 1 z cin2 $end
$var wire 1 { cin1 $end
$var wire 1 t c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 u c_in $end
$var wire 1 { c_outc $end
$var wire 1 | numf1 $end
$var wire 1 } numf2 $end
$var wire 1 ~ csum $end
$var wire 1 !" aux_sum $end
$var wire 1 "" aux_out2 $end
$var wire 1 #" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 #" c_out $end
$var wire 1 | num1 $end
$var wire 1 } num2 $end
$var wire 1 !" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 "" c_out $end
$var wire 1 u num1 $end
$var wire 1 !" num2 $end
$var wire 1 ~ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 { c_in $end
$var wire 1 z c_outc $end
$var wire 1 $" numf1 $end
$var wire 1 %" numf2 $end
$var wire 1 &" csum $end
$var wire 1 '" aux_sum $end
$var wire 1 (" aux_out2 $end
$var wire 1 )" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 )" c_out $end
$var wire 1 $" num1 $end
$var wire 1 %" num2 $end
$var wire 1 '" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 (" c_out $end
$var wire 1 { num1 $end
$var wire 1 '" num2 $end
$var wire 1 &" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 z c_in $end
$var wire 1 y c_outc $end
$var wire 1 *" numf1 $end
$var wire 1 +" numf2 $end
$var wire 1 ," csum $end
$var wire 1 -" aux_sum $end
$var wire 1 ." aux_out2 $end
$var wire 1 /" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 /" c_out $end
$var wire 1 *" num1 $end
$var wire 1 +" num2 $end
$var wire 1 -" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 ." c_out $end
$var wire 1 z num1 $end
$var wire 1 -" num2 $end
$var wire 1 ," sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 y c_in $end
$var wire 1 t c_outc $end
$var wire 1 0" numf1 $end
$var wire 1 1" numf2 $end
$var wire 1 2" csum $end
$var wire 1 3" aux_sum $end
$var wire 1 4" aux_out2 $end
$var wire 1 5" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 5" c_out $end
$var wire 1 0" num1 $end
$var wire 1 1" num2 $end
$var wire 1 3" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 4" c_out $end
$var wire 1 y num1 $end
$var wire 1 3" num2 $end
$var wire 1 2" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4b2 $end
$var wire 1 t c_in $end
$var wire 4 6" numf1 [3:0] $end
$var wire 4 7" numf2 [3:0] $end
$var wire 4 8" csum [3:0] $end
$var wire 1 9" cin3 $end
$var wire 1 :" cin2 $end
$var wire 1 ;" cin1 $end
$var wire 1 W c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 t c_in $end
$var wire 1 ;" c_outc $end
$var wire 1 <" numf1 $end
$var wire 1 =" numf2 $end
$var wire 1 >" csum $end
$var wire 1 ?" aux_sum $end
$var wire 1 @" aux_out2 $end
$var wire 1 A" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 A" c_out $end
$var wire 1 <" num1 $end
$var wire 1 =" num2 $end
$var wire 1 ?" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 @" c_out $end
$var wire 1 t num1 $end
$var wire 1 ?" num2 $end
$var wire 1 >" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 ;" c_in $end
$var wire 1 :" c_outc $end
$var wire 1 B" numf1 $end
$var wire 1 C" numf2 $end
$var wire 1 D" csum $end
$var wire 1 E" aux_sum $end
$var wire 1 F" aux_out2 $end
$var wire 1 G" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 G" c_out $end
$var wire 1 B" num1 $end
$var wire 1 C" num2 $end
$var wire 1 E" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 F" c_out $end
$var wire 1 ;" num1 $end
$var wire 1 E" num2 $end
$var wire 1 D" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 :" c_in $end
$var wire 1 9" c_outc $end
$var wire 1 H" numf1 $end
$var wire 1 I" numf2 $end
$var wire 1 J" csum $end
$var wire 1 K" aux_sum $end
$var wire 1 L" aux_out2 $end
$var wire 1 M" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 M" c_out $end
$var wire 1 H" num1 $end
$var wire 1 I" num2 $end
$var wire 1 K" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 L" c_out $end
$var wire 1 :" num1 $end
$var wire 1 K" num2 $end
$var wire 1 J" sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 9" c_in $end
$var wire 1 W c_outc $end
$var wire 1 N" numf1 $end
$var wire 1 O" numf2 $end
$var wire 1 P" csum $end
$var wire 1 Q" aux_sum $end
$var wire 1 R" aux_out2 $end
$var wire 1 S" aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 S" c_out $end
$var wire 1 N" num1 $end
$var wire 1 O" num2 $end
$var wire 1 Q" sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 R" c_out $end
$var wire 1 9" num1 $end
$var wire 1 Q" num2 $end
$var wire 1 P" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module and_gate $end
$var wire 8 T" num2 [7:0] $end
$var wire 8 U" num1 [7:0] $end
$var reg 8 V" result [7:0] $end
$var reg 8 W" resultado [7:0] $end
$var integer 32 X" i [31:0] $end
$upscope $end
$scope module decrementor $end
$var wire 8 Y" result [7:0] $end
$var wire 8 Z" num1 [7:0] $end
$var wire 1 T cout $end
$scope module FULL_SUBTRACTOR8bDEC $end
$var wire 8 [" numf2 [7:0] $end
$var wire 8 \" numf1 [7:0] $end
$var wire 8 ]" csub [7:0] $end
$var wire 1 ^" cin1 $end
$var wire 1 T c_outc $end
$scope module FULL_SUBTRACTOR4b1 $end
$var wire 1 _" c_in $end
$var wire 4 `" numf1 [3:0] $end
$var wire 4 a" numf2 [3:0] $end
$var wire 4 b" csub [3:0] $end
$var wire 1 c" cin3 $end
$var wire 1 d" cin2 $end
$var wire 1 e" cin1 $end
$var wire 1 ^" c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 _" c_in $end
$var wire 1 e" c_outc $end
$var wire 1 f" numf1 $end
$var wire 1 g" numf2 $end
$var wire 1 h" csub $end
$var wire 1 i" aux_sub $end
$var wire 1 j" aux_out2 $end
$var wire 1 k" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 k" c_out $end
$var wire 1 f" num1 $end
$var wire 1 g" num2 $end
$var wire 1 i" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 j" c_out $end
$var wire 1 i" num1 $end
$var wire 1 _" num2 $end
$var wire 1 h" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 e" c_in $end
$var wire 1 d" c_outc $end
$var wire 1 l" numf1 $end
$var wire 1 m" numf2 $end
$var wire 1 n" csub $end
$var wire 1 o" aux_sub $end
$var wire 1 p" aux_out2 $end
$var wire 1 q" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 q" c_out $end
$var wire 1 l" num1 $end
$var wire 1 m" num2 $end
$var wire 1 o" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 p" c_out $end
$var wire 1 o" num1 $end
$var wire 1 e" num2 $end
$var wire 1 n" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 d" c_in $end
$var wire 1 c" c_outc $end
$var wire 1 r" numf1 $end
$var wire 1 s" numf2 $end
$var wire 1 t" csub $end
$var wire 1 u" aux_sub $end
$var wire 1 v" aux_out2 $end
$var wire 1 w" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 w" c_out $end
$var wire 1 r" num1 $end
$var wire 1 s" num2 $end
$var wire 1 u" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 v" c_out $end
$var wire 1 u" num1 $end
$var wire 1 d" num2 $end
$var wire 1 t" sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 c" c_in $end
$var wire 1 ^" c_outc $end
$var wire 1 x" numf1 $end
$var wire 1 y" numf2 $end
$var wire 1 z" csub $end
$var wire 1 {" aux_sub $end
$var wire 1 |" aux_out2 $end
$var wire 1 }" aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 }" c_out $end
$var wire 1 x" num1 $end
$var wire 1 y" num2 $end
$var wire 1 {" sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 |" c_out $end
$var wire 1 {" num1 $end
$var wire 1 c" num2 $end
$var wire 1 z" sub $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4b2 $end
$var wire 1 ^" c_in $end
$var wire 4 ~" numf1 [3:0] $end
$var wire 4 !# numf2 [3:0] $end
$var wire 4 "# csub [3:0] $end
$var wire 1 ## cin3 $end
$var wire 1 $# cin2 $end
$var wire 1 %# cin1 $end
$var wire 1 T c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 ^" c_in $end
$var wire 1 %# c_outc $end
$var wire 1 &# numf1 $end
$var wire 1 '# numf2 $end
$var wire 1 (# csub $end
$var wire 1 )# aux_sub $end
$var wire 1 *# aux_out2 $end
$var wire 1 +# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 +# c_out $end
$var wire 1 &# num1 $end
$var wire 1 '# num2 $end
$var wire 1 )# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 *# c_out $end
$var wire 1 )# num1 $end
$var wire 1 ^" num2 $end
$var wire 1 (# sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 %# c_in $end
$var wire 1 $# c_outc $end
$var wire 1 ,# numf1 $end
$var wire 1 -# numf2 $end
$var wire 1 .# csub $end
$var wire 1 /# aux_sub $end
$var wire 1 0# aux_out2 $end
$var wire 1 1# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 1# c_out $end
$var wire 1 ,# num1 $end
$var wire 1 -# num2 $end
$var wire 1 /# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 0# c_out $end
$var wire 1 /# num1 $end
$var wire 1 %# num2 $end
$var wire 1 .# sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 $# c_in $end
$var wire 1 ## c_outc $end
$var wire 1 2# numf1 $end
$var wire 1 3# numf2 $end
$var wire 1 4# csub $end
$var wire 1 5# aux_sub $end
$var wire 1 6# aux_out2 $end
$var wire 1 7# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 7# c_out $end
$var wire 1 2# num1 $end
$var wire 1 3# num2 $end
$var wire 1 5# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 6# c_out $end
$var wire 1 5# num1 $end
$var wire 1 $# num2 $end
$var wire 1 4# sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 ## c_in $end
$var wire 1 T c_outc $end
$var wire 1 8# numf1 $end
$var wire 1 9# numf2 $end
$var wire 1 :# csub $end
$var wire 1 ;# aux_sub $end
$var wire 1 <# aux_out2 $end
$var wire 1 =# aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 =# c_out $end
$var wire 1 8# num1 $end
$var wire 1 9# num2 $end
$var wire 1 ;# sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 <# c_out $end
$var wire 1 ;# num1 $end
$var wire 1 ## num2 $end
$var wire 1 :# sub $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module div_module $end
$var wire 8 ># num2 [7:0] $end
$var wire 8 ?# num1 [7:0] $end
$var reg 8 @# accumulator [7:0] $end
$var reg 8 A# divided [7:0] $end
$var reg 8 B# rest [7:0] $end
$var integer 32 C# i [31:0] $end
$upscope $end
$scope module divisor $end
$var wire 8 D# num2 [7:0] $end
$var wire 8 E# num1 [7:0] $end
$var reg 8 F# accumulator [7:0] $end
$var reg 8 G# divided [7:0] $end
$var reg 8 H# quocient [7:0] $end
$var reg 8 I# rest [7:0] $end
$var reg 8 J# result [7:0] $end
$var integer 32 K# i [31:0] $end
$upscope $end
$scope module incrementor $end
$var wire 8 L# result [7:0] $end
$var wire 8 M# num1 [7:0] $end
$var wire 1 P cout $end
$scope module FULL_ADDER8bINC $end
$var wire 8 N# numf2 [7:0] $end
$var wire 8 O# numf1 [7:0] $end
$var wire 8 P# csum [7:0] $end
$var wire 1 Q# cin1 $end
$var wire 1 P c_outc $end
$scope module FULL_ADDER4b1 $end
$var wire 1 R# c_in $end
$var wire 4 S# numf1 [3:0] $end
$var wire 4 T# numf2 [3:0] $end
$var wire 4 U# csum [3:0] $end
$var wire 1 V# cin3 $end
$var wire 1 W# cin2 $end
$var wire 1 X# cin1 $end
$var wire 1 Q# c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 R# c_in $end
$var wire 1 X# c_outc $end
$var wire 1 Y# numf1 $end
$var wire 1 Z# numf2 $end
$var wire 1 [# csum $end
$var wire 1 \# aux_sum $end
$var wire 1 ]# aux_out2 $end
$var wire 1 ^# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 ^# c_out $end
$var wire 1 Y# num1 $end
$var wire 1 Z# num2 $end
$var wire 1 \# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 ]# c_out $end
$var wire 1 R# num1 $end
$var wire 1 \# num2 $end
$var wire 1 [# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 X# c_in $end
$var wire 1 W# c_outc $end
$var wire 1 _# numf1 $end
$var wire 1 `# numf2 $end
$var wire 1 a# csum $end
$var wire 1 b# aux_sum $end
$var wire 1 c# aux_out2 $end
$var wire 1 d# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 d# c_out $end
$var wire 1 _# num1 $end
$var wire 1 `# num2 $end
$var wire 1 b# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 c# c_out $end
$var wire 1 X# num1 $end
$var wire 1 b# num2 $end
$var wire 1 a# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 W# c_in $end
$var wire 1 V# c_outc $end
$var wire 1 e# numf1 $end
$var wire 1 f# numf2 $end
$var wire 1 g# csum $end
$var wire 1 h# aux_sum $end
$var wire 1 i# aux_out2 $end
$var wire 1 j# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 j# c_out $end
$var wire 1 e# num1 $end
$var wire 1 f# num2 $end
$var wire 1 h# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 i# c_out $end
$var wire 1 W# num1 $end
$var wire 1 h# num2 $end
$var wire 1 g# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 V# c_in $end
$var wire 1 Q# c_outc $end
$var wire 1 k# numf1 $end
$var wire 1 l# numf2 $end
$var wire 1 m# csum $end
$var wire 1 n# aux_sum $end
$var wire 1 o# aux_out2 $end
$var wire 1 p# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 p# c_out $end
$var wire 1 k# num1 $end
$var wire 1 l# num2 $end
$var wire 1 n# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 o# c_out $end
$var wire 1 V# num1 $end
$var wire 1 n# num2 $end
$var wire 1 m# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4b2 $end
$var wire 1 Q# c_in $end
$var wire 4 q# numf1 [3:0] $end
$var wire 4 r# numf2 [3:0] $end
$var wire 4 s# csum [3:0] $end
$var wire 1 t# cin3 $end
$var wire 1 u# cin2 $end
$var wire 1 v# cin1 $end
$var wire 1 P c_outc $end
$scope module FULL_ADDER1 $end
$var wire 1 Q# c_in $end
$var wire 1 v# c_outc $end
$var wire 1 w# numf1 $end
$var wire 1 x# numf2 $end
$var wire 1 y# csum $end
$var wire 1 z# aux_sum $end
$var wire 1 {# aux_out2 $end
$var wire 1 |# aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 |# c_out $end
$var wire 1 w# num1 $end
$var wire 1 x# num2 $end
$var wire 1 z# sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 {# c_out $end
$var wire 1 Q# num1 $end
$var wire 1 z# num2 $end
$var wire 1 y# sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER2 $end
$var wire 1 v# c_in $end
$var wire 1 u# c_outc $end
$var wire 1 }# numf1 $end
$var wire 1 ~# numf2 $end
$var wire 1 !$ csum $end
$var wire 1 "$ aux_sum $end
$var wire 1 #$ aux_out2 $end
$var wire 1 $$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 $$ c_out $end
$var wire 1 }# num1 $end
$var wire 1 ~# num2 $end
$var wire 1 "$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 #$ c_out $end
$var wire 1 v# num1 $end
$var wire 1 "$ num2 $end
$var wire 1 !$ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER3 $end
$var wire 1 u# c_in $end
$var wire 1 t# c_outc $end
$var wire 1 %$ numf1 $end
$var wire 1 &$ numf2 $end
$var wire 1 '$ csum $end
$var wire 1 ($ aux_sum $end
$var wire 1 )$ aux_out2 $end
$var wire 1 *$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 *$ c_out $end
$var wire 1 %$ num1 $end
$var wire 1 &$ num2 $end
$var wire 1 ($ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 )$ c_out $end
$var wire 1 u# num1 $end
$var wire 1 ($ num2 $end
$var wire 1 '$ sum $end
$upscope $end
$upscope $end
$scope module FULL_ADDER4 $end
$var wire 1 t# c_in $end
$var wire 1 P c_outc $end
$var wire 1 +$ numf1 $end
$var wire 1 ,$ numf2 $end
$var wire 1 -$ csum $end
$var wire 1 .$ aux_sum $end
$var wire 1 /$ aux_out2 $end
$var wire 1 0$ aux_out $end
$scope module HALF_ADDER1 $end
$var wire 1 0$ c_out $end
$var wire 1 +$ num1 $end
$var wire 1 ,$ num2 $end
$var wire 1 .$ sum $end
$upscope $end
$scope module HALF_ADDER2 $end
$var wire 1 /$ c_out $end
$var wire 1 t# num1 $end
$var wire 1 .$ num2 $end
$var wire 1 -$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module left_shifter $end
$var wire 8 1$ y [7:0] $end
$var wire 8 2$ a [7:0] $end
$upscope $end
$scope module multiplier $end
$var wire 8 3$ num2 [7:0] $end
$var wire 8 4$ num1 [7:0] $end
$var reg 16 5$ accumulator [15:0] $end
$var reg 8 6$ result [7:0] $end
$var integer 32 7$ i [31:0] $end
$upscope $end
$scope module nand_gate $end
$var wire 8 8$ num2 [7:0] $end
$var wire 8 9$ num1 [7:0] $end
$var reg 8 :$ result [7:0] $end
$var reg 8 ;$ resultado [7:0] $end
$var integer 32 <$ i [31:0] $end
$upscope $end
$scope module nor_gate $end
$var wire 8 =$ num2 [7:0] $end
$var wire 8 >$ num1 [7:0] $end
$var reg 8 ?$ result [7:0] $end
$var reg 8 @$ resultado [7:0] $end
$var integer 32 A$ i [31:0] $end
$upscope $end
$scope module not_gate $end
$var wire 8 B$ num1 [7:0] $end
$var reg 8 C$ result [7:0] $end
$var reg 8 D$ resultado [7:0] $end
$var integer 32 E$ i [31:0] $end
$upscope $end
$scope module or_gate $end
$var wire 8 F$ num2 [7:0] $end
$var wire 8 G$ num1 [7:0] $end
$var reg 8 H$ result [7:0] $end
$var reg 8 I$ resultado [7:0] $end
$var integer 32 J$ i [31:0] $end
$upscope $end
$scope module rol_gate $end
$var wire 8 K$ y [7:0] $end
$var wire 8 L$ a [7:0] $end
$upscope $end
$scope module ror_gate $end
$var wire 8 M$ y [7:0] $end
$var wire 8 N$ a [7:0] $end
$upscope $end
$scope module shift_right $end
$var wire 3 O$ shamt [2:0] $end
$var wire 8 P$ y [7:0] $end
$var wire 8 Q$ a [7:0] $end
$upscope $end
$scope module subtractor $end
$var wire 8 R$ numf2 [7:0] $end
$var wire 8 S$ numf1 [7:0] $end
$var wire 8 T$ csub [7:0] $end
$var wire 1 U$ cin1 $end
$var wire 1 B c_outc $end
$scope module FULL_SUBTRACTOR4b1 $end
$var wire 1 V$ c_in $end
$var wire 4 W$ numf1 [3:0] $end
$var wire 4 X$ numf2 [3:0] $end
$var wire 4 Y$ csub [3:0] $end
$var wire 1 Z$ cin3 $end
$var wire 1 [$ cin2 $end
$var wire 1 \$ cin1 $end
$var wire 1 U$ c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 V$ c_in $end
$var wire 1 \$ c_outc $end
$var wire 1 ]$ numf1 $end
$var wire 1 ^$ numf2 $end
$var wire 1 _$ csub $end
$var wire 1 `$ aux_sub $end
$var wire 1 a$ aux_out2 $end
$var wire 1 b$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 b$ c_out $end
$var wire 1 ]$ num1 $end
$var wire 1 ^$ num2 $end
$var wire 1 `$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 a$ c_out $end
$var wire 1 `$ num1 $end
$var wire 1 V$ num2 $end
$var wire 1 _$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 \$ c_in $end
$var wire 1 [$ c_outc $end
$var wire 1 c$ numf1 $end
$var wire 1 d$ numf2 $end
$var wire 1 e$ csub $end
$var wire 1 f$ aux_sub $end
$var wire 1 g$ aux_out2 $end
$var wire 1 h$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 h$ c_out $end
$var wire 1 c$ num1 $end
$var wire 1 d$ num2 $end
$var wire 1 f$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 g$ c_out $end
$var wire 1 f$ num1 $end
$var wire 1 \$ num2 $end
$var wire 1 e$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 [$ c_in $end
$var wire 1 Z$ c_outc $end
$var wire 1 i$ numf1 $end
$var wire 1 j$ numf2 $end
$var wire 1 k$ csub $end
$var wire 1 l$ aux_sub $end
$var wire 1 m$ aux_out2 $end
$var wire 1 n$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 n$ c_out $end
$var wire 1 i$ num1 $end
$var wire 1 j$ num2 $end
$var wire 1 l$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 m$ c_out $end
$var wire 1 l$ num1 $end
$var wire 1 [$ num2 $end
$var wire 1 k$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 Z$ c_in $end
$var wire 1 U$ c_outc $end
$var wire 1 o$ numf1 $end
$var wire 1 p$ numf2 $end
$var wire 1 q$ csub $end
$var wire 1 r$ aux_sub $end
$var wire 1 s$ aux_out2 $end
$var wire 1 t$ aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 t$ c_out $end
$var wire 1 o$ num1 $end
$var wire 1 p$ num2 $end
$var wire 1 r$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 s$ c_out $end
$var wire 1 r$ num1 $end
$var wire 1 Z$ num2 $end
$var wire 1 q$ sub $end
$upscope $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4b2 $end
$var wire 1 U$ c_in $end
$var wire 4 u$ numf1 [3:0] $end
$var wire 4 v$ numf2 [3:0] $end
$var wire 4 w$ csub [3:0] $end
$var wire 1 x$ cin3 $end
$var wire 1 y$ cin2 $end
$var wire 1 z$ cin1 $end
$var wire 1 B c_outc $end
$scope module FULL_SUBTRACTOR1 $end
$var wire 1 U$ c_in $end
$var wire 1 z$ c_outc $end
$var wire 1 {$ numf1 $end
$var wire 1 |$ numf2 $end
$var wire 1 }$ csub $end
$var wire 1 ~$ aux_sub $end
$var wire 1 !% aux_out2 $end
$var wire 1 "% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 "% c_out $end
$var wire 1 {$ num1 $end
$var wire 1 |$ num2 $end
$var wire 1 ~$ sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 !% c_out $end
$var wire 1 ~$ num1 $end
$var wire 1 U$ num2 $end
$var wire 1 }$ sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR2 $end
$var wire 1 z$ c_in $end
$var wire 1 y$ c_outc $end
$var wire 1 #% numf1 $end
$var wire 1 $% numf2 $end
$var wire 1 %% csub $end
$var wire 1 &% aux_sub $end
$var wire 1 '% aux_out2 $end
$var wire 1 (% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 (% c_out $end
$var wire 1 #% num1 $end
$var wire 1 $% num2 $end
$var wire 1 &% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 '% c_out $end
$var wire 1 &% num1 $end
$var wire 1 z$ num2 $end
$var wire 1 %% sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR3 $end
$var wire 1 y$ c_in $end
$var wire 1 x$ c_outc $end
$var wire 1 )% numf1 $end
$var wire 1 *% numf2 $end
$var wire 1 +% csub $end
$var wire 1 ,% aux_sub $end
$var wire 1 -% aux_out2 $end
$var wire 1 .% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 .% c_out $end
$var wire 1 )% num1 $end
$var wire 1 *% num2 $end
$var wire 1 ,% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 -% c_out $end
$var wire 1 ,% num1 $end
$var wire 1 y$ num2 $end
$var wire 1 +% sub $end
$upscope $end
$upscope $end
$scope module FULL_SUBTRACTOR4 $end
$var wire 1 x$ c_in $end
$var wire 1 B c_outc $end
$var wire 1 /% numf1 $end
$var wire 1 0% numf2 $end
$var wire 1 1% csub $end
$var wire 1 2% aux_sub $end
$var wire 1 3% aux_out2 $end
$var wire 1 4% aux_out $end
$scope module HALF_SUBTRACTOR1 $end
$var wire 1 4% c_out $end
$var wire 1 /% num1 $end
$var wire 1 0% num2 $end
$var wire 1 2% sub $end
$upscope $end
$scope module HALF_SUBTRACTOR2 $end
$var wire 1 3% c_out $end
$var wire 1 2% num1 $end
$var wire 1 x$ num2 $end
$var wire 1 1% sub $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module xnor_gate $end
$var wire 8 5% num2 [7:0] $end
$var wire 8 6% num1 [7:0] $end
$var reg 8 7% result [7:0] $end
$var reg 8 8% resultado [7:0] $end
$var integer 32 9% i [31:0] $end
$upscope $end
$scope module xor_gate $end
$var wire 8 :% num2 [7:0] $end
$var wire 8 ;% num1 [7:0] $end
$var reg 8 <% result [7:0] $end
$var reg 8 =% resultado [7:0] $end
$var integer 32 >% i [31:0] $end
$upscope $end
$upscope $end
$scope module IR $end
$var wire 1 * clk $end
$var wire 8 ?% opcode [7:0] $end
$var wire 8 @% operando1 [7:0] $end
$var wire 8 A% operando2 [7:0] $end
$var wire 1 : IR_load $end
$var parameter 32 B% delay $end
$var reg 3 C% counter [2:0] $end
$var reg 2 D% fullRegFlag [1:0] $end
$var reg 24 E% instReg [23:0] $end
$upscope $end
$scope module MemoryAdressRegister $end
$var wire 1 * clk $end
$var wire 8 F% data [7:0] $end
$var wire 1 9 MAR_load $end
$var reg 8 G% instruction [7:0] $end
$upscope $end
$scope module ProgramCounter $end
$var wire 8 H% PC_load [7:0] $end
$var wire 1 6 PC_inc $end
$var wire 1 7 PC_en $end
$var reg 8 I% PC [7:0] $end
$upscope $end
$scope module RF $end
$var wire 1 * clk $end
$var wire 1 . regWriteEnable $end
$var wire 1 / regReadEnable $end
$var wire 8 J% WriteData [7:0] $end
$var wire 8 K% A3 [7:0] $end
$var wire 8 L% A2 [7:0] $end
$var wire 8 M% A1 [7:0] $end
$var reg 8 N% RD1 [7:0] $end
$var reg 8 O% RD2 [7:0] $end
$upscope $end
$scope module RandomAcessMemory $end
$var wire 1 * clk $end
$var wire 8 P% data_in [7:0] $end
$var wire 8 Q% rd_adress [7:0] $end
$var wire 1 R% rd_en $end
$var wire 1 , rst $end
$var wire 8 S% write_adress [7:0] $end
$var wire 1 T% write_en $end
$var parameter 32 U% addr_size $end
$var parameter 32 V% data_size $end
$var reg 8 W% data_out [7:0] $end
$scope task init_memory $end
$var reg 8 X% address [7:0] $end
$var reg 8 Y% data [7:0] $end
$upscope $end
$upscope $end
$scope module UC $end
$var wire 1 * clk $end
$var wire 24 Z% command_word [23:0] $end
$var wire 2 [% fullRegFlag [1:0] $end
$var wire 1 , rst $end
$var parameter 8 \% ADD $end
$var parameter 32 ]% ARITHMETIC_OPERATION_0 $end
$var parameter 32 ^% ARITHMETIC_OPERATION_1 $end
$var parameter 32 _% ARITHMETIC_OPERATION_2 $end
$var parameter 8 `% CALL $end
$var parameter 32 a% CALL_0 $end
$var parameter 32 b% CALL_1 $end
$var parameter 8 c% CMP $end
$var parameter 8 d% DEC $end
$var parameter 32 e% DECODE $end
$var parameter 8 f% DIV $end
$var parameter 32 g% FETCH_0 $end
$var parameter 32 h% FETCH_1 $end
$var parameter 32 i% FETCH_2 $end
$var parameter 8 j% INC $end
$var parameter 32 k% JC $end
$var parameter 32 l% JC_2 $end
$var parameter 8 m% JG $end
$var parameter 32 n% JG_1 $end
$var parameter 8 o% JL $end
$var parameter 32 p% JL_1 $end
$var parameter 8 q% JMP $end
$var parameter 32 r% JMP_0 $end
$var parameter 32 s% JMP_1 $end
$var parameter 8 t% JNZ $end
$var parameter 32 u% JNZ_1 $end
$var parameter 8 v% JZ $end
$var parameter 32 w% JZ_1 $end
$var parameter 8 x% LOA_DIR $end
$var parameter 32 y% LOA_DIR_0 $end
$var parameter 32 z% LOA_DIR_1 $end
$var parameter 8 {% LOA_IMM $end
$var parameter 32 |% LOA_IMM_0 $end
$var parameter 8 }% L_AND $end
$var parameter 8 ~% L_NAND $end
$var parameter 8 !& L_NOR $end
$var parameter 8 "& L_NOT $end
$var parameter 8 #& L_OR $end
$var parameter 8 $& L_ROL $end
$var parameter 8 %& L_ROR $end
$var parameter 8 && L_XNOR $end
$var parameter 8 '& L_XOR $end
$var parameter 8 (& MOD $end
$var parameter 8 )& MOV $end
$var parameter 32 *& MOV_0 $end
$var parameter 32 +& MOV_1 $end
$var parameter 8 ,& MULT $end
$var parameter 8 -& REG_C $end
$var parameter 8 .& RET $end
$var parameter 32 /& RET_0 $end
$var parameter 8 0& SL $end
$var parameter 8 1& SR $end
$var parameter 8 2& STR_DIR $end
$var parameter 32 3& STR_DIR_0 $end
$var parameter 32 4& STR_DIR_1 $end
$var parameter 8 5& STR_IMM $end
$var parameter 32 6& STR_IMM_0 $end
$var parameter 8 7& SUB $end
$var reg 8 8& ADR_1 [7:0] $end
$var reg 8 9& ADR_2 [7:0] $end
$var reg 8 :& ADR_3 [7:0] $end
$var reg 8 ;& ALU_sel [7:0] $end
$var reg 1 : IR_load $end
$var reg 1 9 MAR_load $end
$var reg 8 <& Op1 [7:0] $end
$var reg 8 =& Op2 [7:0] $end
$var reg 1 7 PC_en $end
$var reg 1 6 PC_inc $end
$var reg 8 >& PC_load [7:0] $end
$var reg 8 ?& current_state [7:0] $end
$var reg 8 @& next_state [7:0] $end
$var reg 8 A& pc_value_reg [7:0] $end
$var reg 1 / regReadEnable $end
$var reg 1 . regWriteEnable $end
$var reg 8 B& temporary_info_reg [7:0] $end
$var reg 8 C& write_data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 7&
b101 6&
b1 5&
b111 4&
b110 3&
b10 2&
b10101 1&
b10100 0&
b10100 /&
b11011 .&
b10 -&
b101 ,&
b1100 +&
b1011 *&
b11010 )&
b111 (&
b10001 '&
b1111 &&
b10111 %&
b10110 $&
b1001 #&
b1010 "&
b1101 !&
b1110 ~%
b1000 }%
b1000 |%
b11000 {%
b1010 z%
b1001 y%
b11001 x%
b10110 w%
b11100 v%
b10111 u%
b11101 t%
b10001 s%
b10000 r%
b11001 q%
b11001 p%
b11111 o%
b11000 n%
b11110 m%
b11010 l%
b10101 k%
b10000 j%
b11 i%
b1 h%
b0 g%
b110 f%
b100 e%
b10010 d%
b11000 c%
b10011 b%
b10010 a%
b11010 `%
b1111 _%
b1110 ^%
b1101 ]%
b11 \%
b1000 V%
b1000 U%
b10 B%
b100 k
b10101 j
b10100 i
b101 h
b111 g
b10001 f
b1111 e
b10111 d
b10110 c
b1001 b
b1010 a
b1101 `
b1110 _
b1000 ^
b10000 ]
b110 \
b10010 [
b11000 Z
b11 Y
$end
#0
$dumpvars
bx C&
bx B&
bx A&
bx @&
bx ?&
bx >&
bx =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bz [%
bx Z%
bx Y%
bx X%
bx W%
0T%
b0 S%
1R%
bx Q%
b0 P%
bx O%
bx N%
bx M%
bx L%
bx K%
bx J%
bx I%
bx H%
bx G%
bx F%
bx E%
b0 D%
b0 C%
bz A%
bz @%
bx ?%
bx >%
bx =%
bx <%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
bx 5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
bx w$
bx v$
bx u$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
0a$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
bx Y$
bx X$
bx W$
0V$
xU$
bx T$
bx S$
bx R$
bx Q$
b0xxxxxxx P$
bz O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx0 1$
00$
x/$
x.$
x-$
0,$
x+$
0*$
x)$
x($
x'$
0&$
x%$
0$$
x#$
x"$
x!$
0~#
x}#
0|#
x{#
xz#
xy#
0x#
xw#
xv#
xu#
xt#
bx s#
b0 r#
bx q#
0p#
xo#
xn#
xm#
0l#
xk#
0j#
xi#
xh#
xg#
0f#
xe#
0d#
xc#
xb#
xa#
0`#
x_#
x^#
0]#
x\#
x[#
1Z#
xY#
xX#
xW#
xV#
bx U#
b1 T#
bx S#
0R#
xQ#
bx P#
bx O#
b1 N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
0=#
x<#
x;#
x:#
09#
x8#
07#
x6#
x5#
x4#
03#
x2#
01#
x0#
x/#
x.#
0-#
x,#
0+#
x*#
x)#
x(#
0'#
x&#
x%#
x$#
x##
bx "#
b0 !#
bx ~"
0}"
x|"
x{"
xz"
0y"
xx"
0w"
xv"
xu"
xt"
0s"
xr"
0q"
xp"
xo"
xn"
0m"
xl"
xk"
0j"
xi"
xh"
1g"
xf"
xe"
xd"
xc"
bx b"
b1 a"
bx `"
0_"
x^"
bx ]"
bx \"
b1 ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
bx 8"
bx 7"
bx 6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
0""
x!"
x~
x}
x|
x{
xz
xy
bx x
bx w
bx v
0u
xt
bx s
bx r
bx q
bx p
xo
xn
xm
bx l
bx X
xW
bx V
bx U
xT
bx S
bx R
bx Q
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx0 D
b0xxxxxxx C
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
bx 8
x7
x6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
x.
bx -
z,
bx +
z*
bz )
bz (
bx '
1&
0%
bz $
bz #
bz "
bz !
$end
#5000000000
1%
#10000000000
0%
#15000000000
1%
#20000000000
0%
0&
#25000000000
1%
#30000000000
0%
#35000000000
1%
#40000000000
0%
b10 Y%
b10 X%
#45000000000
1%
#50000000000
0%
#55000000000
1%
#60000000000
0%
b10 Y%
b101 X%
#65000000000
1%
#70000000000
0%
#75000000000
1%
#80000000000
0%
b1 Y%
b1000 X%
#85000000000
1%
#90000000000
0%
#95000000000
1%
#100000000000
0%
